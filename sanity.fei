
var g_failcount = 0;

function check(msg, val, expect)
{
    print("checking ", msg, " ... ");
    if(val == expect)
    {
        println("ok");
    }
    else
    {
        g_failcount = g_failcount + 1;
        println("fail (expected: ", expect, ", but got: ", val, ")");
    }
}

{
    // tests that array literals are propagated correctly.
    // these are created at runtime!
    arr = [1, 2, 3];
    check("arrays (length)", arr.length, 3);
    check("arrays (values)", arr, [1, 2, 3]);
    check("arrays (index)", arr[1], 2)
    check("arrays (join)", [arr.join("/"), "red", "green", "blue"].join("#"), "1/2/3#red#green#blue");
}
{
    // tests that classes and inheritance work, specifically
    // that inheriting correctly inherits functions and fields.
    // importantly, also checks that arguments in the stack are forwarded correctly.
    class First
    {
        init(n)
        {
            this.firstname = n
        }

        getFirstName()
        {
            return this.firstname;
        }
    }

    class Second from First
    {
        init(n)
        {
            super.init("john")
            this.lastname = n
        }

        getLastName()
        {
            return this.lastname;
        }
    }

    class Person from Second
    {
        init()
        {
            super.init("doe")
        }

        fullname()
        {
            super.init("doe")
            return this.getFirstName() + " " + this.getLastName();
        }
    }
    
    fc = Person()
    check("class creation and inheritance", fc.fullname(), "john doe")
}


if(g_failcount == 0)
{
    println("all is well");
}
else
{
    println("something broke!");
}

