
function clock()
{
    return 0;
}

class Tree
{
    init(item, depth)
    {
        this.item = item;
        this.depth = depth;
        if (depth > 0)
        {
            var item2 = item + item;
            depth = depth - 1;
            this.left = Tree(item2 - 1, depth);
            this.right = Tree(item2, depth);
        }
        else
        {
            this.left = null;
            this.right = null;
        }
    }

    check()
    {
        if(this.left == null)
        {
            return this.item;
        }
        var a = this.item;
        var b = this.left.check();
        var c = this.right.check();
        return a + b - c;
    }
}

var mindepth = 4;
var maxdepth = 14;
var stretchdepth = maxdepth + 1;

var start = clock();

var dep =  Tree(0, stretchdepth).check();
println("stretch tree of depth:", stretchdepth, " check:",dep);

var longlivedtree = Tree(0, maxdepth);


var iterations = 1;
var d = 0;
while (d < maxdepth)
{
    iterations = iterations * 2;
    d = d + 1;
}

var depth = mindepth;
while (depth < stretchdepth)
{
    var check = 0;
    var i = 1;
    while (i <= iterations)
    {
        var t1 = Tree(i, depth).check();
        var t2 = Tree(-i, depth).check();
        check = check + t1 + t2;
        i = i + 1;
    }
    println("num trees:", iterations * 2, ", depth:", depth, ", check:", check);
    iterations = iterations / 4;
    depth = depth + 2;
}

println("long lived tree of depth:", maxdepth, ", check:", longlivedtree.check(), ", elapsed:", clock() - start);
